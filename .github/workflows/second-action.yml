#give your workflow a name
name: Second Workflow

#Define when your workflow must be executed/triggered
#kick off build whenever a push happens
#on:
#    push:
#        branches:
#            - 'main'
#            - 'releases/**'
on: push

#define jobs
jobs: 
  #can be anyname its basically the name of your job
  second-job: 
    #what env must your job run on linux, windows etc
    runs-on: ubuntu-latest
    steps:
      - name: get code from repo
        uses: actions/checkout@v4 #remember you running your test on server ubuntu one so you have to get the code on the server  

      - name: List files in project
        run: ls -la

      - name: Set up JDK 21 (Amazon Corretto)
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '21'
          cache: maven

      - name: Build & Run Tests
        run: |
          cd workflows
          mvn -B -ntp clean install
        # clean = wipe target
        # install = build + test + install into local repo

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: workflows/target/*.jar

      - name: Complete 
        run: echo "Done -bye"

  # second job that builds & pushes the container
  build-container:
    runs-on: ubuntu-latest
    needs: second-job  # wait for the jar
    steps:
      - name: get code (for Dockerfile)
        uses: actions/checkout@v4

      # bring back the jar to the same path the Dockerfile expects
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-jar
          path: workflows/target

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set short SHA
        run: echo "SHA7=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .   # repo root
          file: workflows/Dockerfile     # ‚Üê tell it where the Dockerfile is
          push: true
          tags: thebestever535/pipelinetest:${{ env.SHA7 }}
    # 4. Checkout GitOps repo
      - name: Checkout GitOps repo
        uses: actions/checkout@v4
        with:
          repository: 214068730/pipeline_gitops
          token: ${{ secrets.GITHUB_TOKEN }}
          path: gitops

      # 5. Update deployment.yaml with new SHA
     - name: Update pipeline.yaml with new SHA
       run: |
        cd gitops/pipeline_app
        sed -i "s#thebestever535/pipelinetest:.*#thebestever535/pipelinetest:${GITHUB_SHA}#g" pipeline.yaml

      # 6. Commit and push change back to GitOps repo
      - name: Commit & Push changes
        run: |
          cd gitops
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add dev/myapp/k8s/deployment.yaml
          git commit -m "Update myapp image to $GITHUB_SHA"
          git push


